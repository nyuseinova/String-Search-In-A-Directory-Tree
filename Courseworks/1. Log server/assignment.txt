Лог сървър

Напишете клиент-сървър приложение за логване на диагностични съобщения на отдалечен сървър. Сървърът е специализирано приложение, което очаква съобщения от много клиенти и ги записва в общ локален (за самия сървър, но не и за клиентите) файл. От страна на клиентите трябва да направите API, което да може да се ползва във всякакви приложения.

1. Сървърът очаква връзка от клиентите на предварително определен порт (примерно 10514).
2. Комуникацията между сървъра и клиентите е текстова и базирна на редове, т.е. всеки един от участниците винаги праща цял ред.
3. След като бъде установена връзката, клиентът първо трябва да прати своето име на един ред. Името трябва да бъде някакъв уникален (сред тези на другите клиенти) идентификатор. Съответно, след установяване на връзка, сървърът първо прочита името на клиента на един ред и чак след това очаква съобщения.
4. Когато сървърът получи едно съобщение, той трябва да го запише на нов ред в общия лог файл в следния формат:

година-месец-ден час:минути:секунди.милисекунди [уникален идентификатор на клиента]: съобщение

По-специфични изисквания към клиентското API:
1. Нишката, която извиква методът за логване на съобщение, не бива да бъде блокирана.
2. Ако няколко нишки горе-долу едновременно извикат API-то за логване, то техните съобщения трябва да се пратят на сървъра едно след друго (без смесване).
3. Всяко съобщение трябва да бъде изпратено на сървъра възможно най-бързо (но 1. има приоритет).
4. Клиентът трябва да поддържа точно една TCP връзка към сървъра. Ако тя се разпадне, клиентът трябва да я изгради наново. След като връзката се преизгради, натрупаните до момента съобщения трябва да се пратят възможно най-скоро.

По-специфични изисквания към сървъра:
1. Сървърът трябва да записва дадено съобщение във файла възможно най-скоро след получаването му от клиента.
2. Ако няколко клиента горе-долу едновременно пратят съобщения, то техните съобщения не бива да се смесват в лог файла. Това изискване не бива да забавя получаването на съобщения по мрежата, а евентуално само записа им във файла.
3. Сървърът не бива да използва метода flush() от съображения за производителност.

Подсказки:
1. Когато единственият ресурс, до който синхронизирате достъпа, е входно-изходен поток, тогава можете да игнорирате съвета да не извършвате вход/изход в синхронизиран блок.
2. За уникален клиентски идентификатор може да използвате следното:
java.lang.management.ManagementFactory.getRuntimeMXBean().getName()